{"version":3,"file":"static/webpack/static/development/pages/index.js.d32b50e90bec8830058f.hot-update.js","sources":["webpack:///./components/App.js","webpack:///./components/MainPane.js"],"sourcesContent":["import React from \"react\";\nimport xs from \"xstream\";\nimport ResizeHandle from \"./ResizeHandle\";\nimport MainPane from \"./MainPane\";\nimport Header from \"./Header\";\nimport Sidebar from \"./Sidebar\";\nimport theme from \"../theme\";\n\nimport { componentFromStream, createEventHandler } from \"../util/recompose\";\nimport * as playlist from \"../data/PlaylistStore\";\nimport * as ui from \"../data/UIStore\";\n\nif (global.window) {\n  window.playlist = playlist;\n}\n\nexport default componentFromStream(() => {\n  const {\n    handler: onSidebarResize,\n    stream: sidebarDeltasInput$,\n  } = createEventHandler();\n  ui.sidebarDeltas$.imitate(sidebarDeltasInput$);\n\n  const {\n    handler: onSelectPlaylist,\n    stream: selectedPlaylistInput$,\n  } = createEventHandler();\n  ui.selectedPlaylistChanges$.imitate(selectedPlaylistInput$);\n\n  return xs\n    .combine(ui.sidebarWidth$, playlist.playlists$, ui.selectedPlaylist$)\n    .map(([sidebarWidth, playlists, selectedPlaylist]) => (\n      <div\n        style={{\n          height: \"100vh\",\n          display: \"flex\",\n          flexDirection: \"column\",\n        }}\n      >\n        <Header />\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"stretch\",\n            flexGrow: 1,\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"stretch\",\n              width: sidebarWidth,\n              flexShrink: \"0\",\n              position: \"relative\",\n            }}\n          >\n            <Sidebar\n              style={{ flexGrow: \"1\", overflow: \"auto\" }}\n              playlists={playlists}\n              selectedPlaylist={selectedPlaylist}\n              onSelectPlaylist={onSelectPlaylist}\n            />\n            <ResizeHandle\n              onResize={onSidebarResize}\n              style={{\n                position: \"absolute\",\n                right: -5,\n                width: 5,\n                top: 0,\n                height: \"100%\",\n              }}\n            />\n          </div>\n          <MainPane\n            style={{\n              flexGrow: 1,\n            }}\n          />\n        </div>\n      </div>\n    ));\n});\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport xs from \"xstream\";\nimport randomMC from \"random-material-color\";\nimport _ from \"lodash\";\n\nimport { componentFromStream, createEventHandler } from \"../util/recompose\";\nimport * as playlist from \"../data/PlaylistStore\";\nimport * as ui from \"../data/UIStore\";\nimport theme from \"../theme\";\n\n// import Table from \"./VirtualizedTable\";\nimport Table from \"./BasicTable\";\nimport SearchBar from \"./SearchBar\";\nimport TableHeader from \"./TableHeader\";\n\nexport default componentFromStream(() => {\n  const tagSelectOptions$ = playlist.playlists$\n    .map(playlists =>\n      playlists.map(p => ({\n        label: p.name,\n        value: p.id,\n        color: randomMC.getColor({ text: p.id }),\n      })),\n    )\n    .remember();\n  const tagSelectOptionsMap$ = tagSelectOptions$\n    .map(options => _.keyBy(options, \"value\"))\n    .remember();\n\n  return xs\n    .combine(\n      playlist.filteredTracks$,\n      playlist.tagsByTrack$,\n      playlist.tracksById$,\n      tagSelectOptions$,\n      tagSelectOptionsMap$,\n    )\n    .map(\n      ([\n        filteredTracks,\n        tagsByTrack,\n        tracksById,\n        tagSelectOptions,\n        tagSelectOptionsMap,\n      ]) => (\n        <div\n          style={{\n            overflow: \"auto\",\n            background: theme.colors.backgroundLight,\n            ...this.props.style,\n          }}\n        >\n          <SearchBar />\n          <TableHeader />\n          <Table\n            filteredTracks={filteredTracks}\n            tagsByTrack={tagsByTrack}\n            tracksById={tracksById}\n            tagSelectOptions={tagSelectOptions}\n            tagSelectOptionsMap={tagSelectOptionsMap}\n            addTag={(trackId, playlistId) =>\n              playlist.addTag({ trackId, playlistId })\n            }\n            removeTag={(trackId, playlistId) =>\n              playlist.removeTag({ trackId, playlistId })\n            }\n            createAndAddTag={(trackId, playlistName) =>\n              playlist.createAndAddTag({ trackId, playlistName })\n            }\n          />\n        </div>\n      ),\n    );\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AANA;AAAA;AAAA;AACA;AAUA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AA1CA;AAkDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AADA;AAQA;AACA;AAAA;AAGA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAQA;AACA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AADA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBA;AAmCA;;;;A","sourceRoot":""}