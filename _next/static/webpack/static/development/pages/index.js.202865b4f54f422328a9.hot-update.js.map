{"version":3,"file":"static/webpack/static/development/pages/index.js.202865b4f54f422328a9.hot-update.js","sources":["webpack:///./data/PlaylistStore.js"],"sourcesContent":["import fetch from \"../util/fetch\";\nimport { observable, autorun, computed, decorate } from \"mobx\";\nimport _ from \"lodash\";\n\nexport default class PlaylistStore {\n  constructor() {\n    this.playlists = observable([]);\n    this.tracksByPlaylist = observable({});\n    this.tracksById = {};\n    this.searchState = observable({\n      query: \"\",\n      selectedPlaylistId: \"all\",\n      numFetches: 0\n    });\n\n    this.playlists.observe(changeData => {\n      console.log(\"changedata\", changeData);\n      if (changeData.type === \"splice\") {\n        changeData.added.forEach(p => {\n          this.fetchTracks(p.id, p.tracks.href);\n        });\n      }\n    });\n\n    this.fetchUserProfile();\n    this.fetchPlaylists();\n  }\n\n  async fetchUserProfile() {\n    const resp = await fetch(\"https://api.spotify.com/v1/me\");\n    const data = await resp.json();\n    console.log(\"fetchUser\", data);\n  }\n\n  async fetchPlaylists(\n    url = \"https://api.spotify.com/v1/me/playlists?limit=50\"\n  ) {\n    this.searchState.numFetches += 1;\n    const resp = await fetch(url);\n    this.searchState.numFetches -= 1;\n    const { next, items } = await resp.json();\n    this.playlists.push(...items);\n\n    // if (next) {\n    //   console.log(\"calling next\", next);\n    //   this.fetchPlaylists(next);\n    // }\n  }\n\n  async fetchTracks(playlistId, url) {\n    this.searchState.numFetches += 1;\n    const resp = await fetch(url);\n    const { next, items } = await resp.json();\n\n    if (!this.tracksByPlaylist[playlistId]) {\n      this.tracksByPlaylist[playlistId] = [];\n    }\n\n    if (items) {\n      this.tracksByPlaylist[playlistId].push(...items);\n\n      items.forEach(track => (this.tracksById[track.track.uri] = track));\n    }\n\n    this.searchState.numFetches -= 1;\n\n    // if (next) {\n    //   this.fetchTracks(playlistId, next);\n    // }\n  }\n\n  get playlistsById() {\n    return _.keyBy(this.playlists, \"id\");\n  }\n\n  get playlistSelectValues() {\n    return this.playlists.map(p => ({ value: p.id, label: p.name }));\n  }\n\n  get playlistIds() {\n    return this.playlists.map(p => p.id);\n  }\n\n  get allTracks() {\n    return _.sortBy(\n      _.uniqBy(\n        _.flatten(Object.values(this.tracksByPlaylist)),\n        t => t.track.uri\n      ),\n      t => t.track.name\n    );\n  }\n\n  get tagsByTrack() {\n    console.log(\"computing tagsByTrack\");\n    const ret = {};\n\n    _.forEach(this.tracksByPlaylist, (tracks, playlistId) => {\n      tracks.forEach(t => {\n        const identifier = t.track.uri;\n        if (!ret[identifier]) {\n          ret[identifier] = [];\n        }\n\n        if (!ret[identifier].includes(playlistId)) {\n          ret[identifier].push(playlistId);\n        }\n      });\n    });\n\n    return ret;\n  }\n\n  get filteredTracks() {\n    const tracksForSelectedList =\n      (this.searchState.selectedPlaylistId === \"all\"\n        ? this.allTracks\n        : this.tracksByPlaylist[this.searchState.selectedPlaylistId]) || [];\n\n    const filteredList = this.searchState.query\n      ? tracksForSelectedList.filter(t => {\n          const query = this.searchState.query.toLowerCase();\n          return (\n            t.track.name.toLowerCase().includes(query) ||\n            _.some(t.track.artists, a => {\n              return a.name.toLowerCase().includes(query);\n            })\n          );\n        })\n      : tracksForSelectedList;\n\n    return filteredList;\n  }\n\n  addTag = async (trackUri, playlistId) => {\n    // const resp = await fetch(\n    //   `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,\n    //   {\n    //     method: \"POST\",\n    //     body: JSON.stringify({\n    //       uris: [trackUri]\n    //     })\n    //   }\n    // );\n\n    // if (resp.ok) {\n    this.tracksByPlaylist[playlistId].push(this.tracksById[trackUri]);\n    // } else {\n    // }\n  };\n\n  removeTag = async (trackUri, playlistId) => {\n    // const resp = await fetch(\n    //   `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,\n    //   {\n    //     method: \"DELETE\",\n    //     body: JSON.stringify({\n    //       tracks: [{ uri: trackUri }]\n    //     })\n    //   }\n    // );\n\n    // if (resp.ok) {\n    this.tracksByPlaylist[playlistId] = this.tracksByPlaylist[\n      playlistId\n    ].filter(t => t.track.uri !== trackUri);\n    // } else {\n    // }\n  };\n\n  createTagWithTrack = async (trackUri, playlistName) => {\n    const resp = await fetch(\n      `https://api.spotify.com/v1/users/{user_id}/playlists`,\n      {\n        method: \"POST\"\n      }\n    );\n  };\n}\n\ndecorate(PlaylistStore, {\n  playlistsById: computed,\n  playlistIds: computed,\n  allTracks: computed,\n  tagsByTrack: computed,\n  filteredTracks: computed\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiIA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAlIA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkJA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAEA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAnJA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AADA;AACA;AAJA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAtKA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AAEA;AACA;;AADA;;AACA;AACA;;AADA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAEA;;AACA;AACA;;AADA;AACA;;AACA;AACA;;;AADA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;AACA;;AACA;AACA;;AADA;;AACA;AACA;;;AADA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;;;;AAEA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AAGA;AAAA;AAEA;AAAA;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAKA;AAEA;AACA;AAAA;AAGA;AACA;AAEA;AAGA;AACA;;;;;;AAhIA;AAgLA;AACA;AACA;AACA;AACA;AACA;AALA;;;;A","sourceRoot":""}