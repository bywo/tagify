{"version":3,"file":"static/webpack/static/development/pages/index.js.dfabaeaa16df863be1b8.hot-update.js","sources":["webpack:///./components/Table.js","webpack:///./components/TableRow.js"],"sourcesContent":["import { observer } from \"mobx-react\";\nimport { reaction, decorate, computed } from \"mobx\";\nimport {\n  List,\n  AutoSizer,\n  CellMeasurer,\n  CellMeasurerCache\n} from \"react-virtualized\";\nimport ResizeHandle from \"./ResizeHandle\";\nimport TableRow from \"./TableRow\";\nimport randomMC from \"random-material-color\";\n\nexport default observer(\n  class Table extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this._cache = new CellMeasurerCache({\n        fixedWidth: true,\n        minHeight: 25,\n        keyMapper: rowIndex => {\n          const track = this.props.playlistStore.filteredTracks[rowIndex].track;\n          return track.uri;\n        }\n      });\n\n      reaction(\n        () =>\n          this.props.uiStore.state.trackColWidth +\n          this.props.uiStore.state.artistColWidth +\n          this.props.uiStore.mainPanelWidth,\n        () => {\n          this._cache.clearAll();\n        }\n      );\n\n      // reaction(\n      //   () => this.props.playlistStore.filteredTracks,\n      //   () => {\n      //     console.log(\"filteredtracks reaction\");\n      //     // this._cache.clearAll();\n      //     this.listRef && this.listRef.forceUpdate();\n      //   }\n      // );\n\n      reaction(\n        () => this.props.playlistStore.searchState.query,\n        () => {\n          console.log(\"query reaction\");\n          this._cache.clearAll();\n          this.listRef && this.listRef.forceUpdate();\n        }\n      );\n    }\n    render() {\n      console.log(\"render\");\n      if (this.props.playlistStore.searchState.numFetches) {\n        return (\n          <div>Loading...{this.props.playlistStore.searchState.numFetches}</div>\n        );\n      }\n\n      const filteredList = this.props.playlistStore.filteredTracks;\n\n      const tagsByTrack = this.props.playlistStore.tagsByTrack;\n      const playlistsById = this.props.playlistStore.playlistsById;\n\n      return (\n        <React.Fragment>\n          <input\n            value={this.props.playlistStore.searchState.query}\n            onChange={e => {\n              this.props.playlistStore.searchState.query = e.target.value;\n            }}\n          />\n          <div style={{ display: \"flex\" }}>\n            <div\n              style={{\n                position: \"relative\",\n                width: this.props.uiStore.state.trackColWidth\n              }}\n            >\n              Title\n              <ResizeHandle\n                onResize={delta =>\n                  (this.props.uiStore.state.trackColWidth += delta)\n                }\n                style={{\n                  position: \"absolute\",\n                  right: 0,\n                  width: 5,\n                  top: 0,\n                  height: \"100%\",\n                  background: \"gray\"\n                }}\n              />\n            </div>\n            <div\n              style={{\n                position: \"relative\",\n                width: this.props.uiStore.state.artistColWidth\n              }}\n            >\n              Artist\n              <ResizeHandle\n                onResize={delta =>\n                  (this.props.uiStore.state.artistColWidth += delta)\n                }\n                style={{\n                  position: \"absolute\",\n                  right: 0,\n                  width: 5,\n                  top: 0,\n                  height: \"100%\",\n                  background: \"gray\"\n                }}\n              />\n            </div>\n            <div>Tags</div>\n          </div>\n          <List\n            ref={ref => (this.listRef = ref)}\n            width={this.props.uiStore.mainPanelWidth}\n            height={this.props.uiStore.state.windowHeight - 100}\n            deferredMeasurementCache={this._cache}\n            rowCount={filteredList.length}\n            rowHeight={this._cache.rowHeight}\n            rowRenderer={({ key, index, parent, style }) => {\n              const t = filteredList[index];\n              const identifier = t.track.uri;\n              const tags = tagsByTrack[identifier].map(\n                playlistId => this.tagSelectOptionsMap[playlistId]\n              );\n\n              return (\n                <div key={t.track.uri} style={style}>\n                  <TableRow\n                    style={style}\n                    index={index}\n                    parent={parent}\n                    cellMeasurerCache={this._cache}\n                    track={t.track}\n                    tags={tags}\n                    tagOptions={this.tagSelectOptions}\n                    trackColWidth={this.props.uiStore.state.trackColWidth}\n                    artistColWidth={this.props.uiStore.state.artistColWidth}\n                    addTag={this.props.playlistStore.addTag}\n                    removeTag={this.props.playlistStore.removeTag}\n                  />\n                </div>\n              );\n            }}\n          />\n        </React.Fragment>\n      );\n    }\n\n    get tagSelectOptions() {\n      return _.map(this.playlistStore.playlistsById, (p, id) => ({\n        label: p.name,\n        value: id,\n        color: randomMC.getColor({ text: id })\n      }));\n    }\n\n    get tagSelectOptionsMap() {\n      return _.keyBy(this.tagSelectOptions, \"value\");\n    }\n  }\n);\n\ndecorate(Table, {\n  tagSelectOptions: computed,\n  tagSelectOptionsMap: computed\n});\n","import {\n  List,\n  AutoSizer,\n  CellMeasurer,\n  CellMeasurerCache\n} from \"react-virtualized\";\nimport CreatableSelect from \"react-select/lib/Creatable\";\nimport randomMC from \"random-material-color\";\n\nexport default class TableRow extends React.Component {\n  componentWillMount() {\n    console.log(\"willMount\");\n  }\n\n  shouldComponentUpdate(nextProps) {\n    console.log(\"shouldUpdate\", this.props.track.name, nextProps.track.name);\n    if (this.props.track.uri !== nextProps.track.uri) {\n      return true;\n    }\n\n    if (this.props.tags.length !== nextProps.tags.length) {\n      return true;\n    }\n\n    if (this.props.trackColWidth !== nextProps.trackColWidth) {\n      return true;\n    }\n\n    if (this.props.artistColWidth !== nextProps.artistColWidth) {\n      return true;\n    }\n\n    if (this.props.style.height !== nextProps.style.height) {\n      return true;\n    }\n\n    console.log(\"return false\");\n    return false;\n  }\n\n  render() {\n    return (\n      <CellMeasurer\n        cache={this.props.cellMeasurerCache}\n        columnIndex={0}\n        rowIndex={this.props.index}\n        parent={this.props.parent}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            borderBottom: \"solid 1px gray\",\n            alignItems: \"baseline\"\n          }}\n        >\n          <div\n            style={{\n              flexShrink: \"0\",\n              width: this.props.trackColWidth,\n              padding: \"4px\"\n            }}\n          >\n            {this.props.track.name}\n          </div>\n          <div\n            style={{\n              flexShrink: \"0\",\n              width: this.props.artistColWidth,\n              padding: \"4px\"\n            }}\n          >\n            {this.props.track.artists.map((a, index) => (\n              <span key={a.id}>\n                {a.name}\n                {index !== this.props.track.artists.length - 1 ? \", \" : null}\n              </span>\n            ))}\n          </div>\n          <div\n            style={{\n              flexGrow: \"1\",\n              padding: \"4px\"\n            }}\n          >\n            <CreatableSelect\n              isMulti\n              isSearchable\n              options={this.props.tagOptions}\n              value={this.props.tags}\n              onChange={selectedOptions => {\n                this.props.cellMeasurerCache.clear(this.props.index);\n                const added = _.difference(selectedOptions, this.props.tags);\n                const deleted = _.difference(this.props.tags, selectedOptions);\n                added.forEach(({ value: playlistId }) => {\n                  this.props.addTag(this.props.track.uri, playlistId);\n                });\n                deleted.forEach(({ value: playlistId }) => {\n                  this.props.removeTag(this.props.track.uri, playlistId);\n                });\n              }}\n              styles={{\n                multiValue: (styles, { data }) => ({\n                  ...styles,\n                  backgroundColor: randomMC.getColor({ text: data })\n                }),\n                multiValueLabel: styles => ({\n                  ...styles,\n                  color: \"white\"\n                }),\n                multiValueRemove: styles => ({\n                  ...styles,\n                  color: \"white\"\n                })\n              }}\n            />\n          </div>\n        </div>\n      </CellMeasurer>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAMA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAAA;AAKA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AArCA;AAuCA;AACA;AA1CA;AAAA;AAAA;AA0CA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AA/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCA;AA/IA;AAAA;AAAA;AAkJA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAKA;AAvJA;AAAA;AAAA;AA0JA;AACA;AA3JA;AACA;AADA;AAAA;AA+JA;AACA;AACA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3KA;AAMA;AACA;AACA;AACA;;;;;;;;;;;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAQA;AACA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAFA;AAAA;AAIA;AAAA;AAEA;AAFA;AAAA;AAIA;AAAA;AAEA;AAFA;AAAA;AATA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCA;;;;AA9GA;AACA;;;;;A","sourceRoot":""}